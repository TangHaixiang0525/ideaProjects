import org.omg.CORBA.*;import org.omg.CORBA.Object;import org.omg.Dynamic.Parameter;import org.omg.IOP.ServiceContext;import org.omg.PortableInterceptor.InvalidSlot;import org.omg.PortableInterceptor.RequestInfo;/** * Created by Hiram on 2016/4/12. */public class start  implements RequestInfo{	RequestInfo info;	public int request_id() {		return info.request_id();	}	public String operation() {		return info.operation();	}	public Parameter[] arguments() {		return info.arguments();	}	public TypeCode[] exceptions() {		return info.exceptions();	}	public String[] contexts() {		return info.contexts();	}	public String[] operation_context() {		return info.operation_context();	}	public Any result() {		return info.result();	}	public boolean response_expected() {		return info.response_expected();	}	public short sync_scope() {		return info.sync_scope();	}	public short reply_status() {		return info.reply_status();	}	public Object forward_reference() {		return info.forward_reference();	}	public Any get_slot(int id) throws InvalidSlot {		return info.get_slot(id);	}	public ServiceContext get_request_service_context(int id) {		return info.get_request_service_context(id);	}	public ServiceContext get_reply_service_context(int id) {		return info.get_reply_service_context(id);	}	public boolean _is_a(String repositoryIdentifier) {		return info._is_a(repositoryIdentifier);	}	public boolean _is_equivalent(Object other) {		return info._is_equivalent(other);	}	public boolean _non_existent() {		return info._non_existent();	}	public int _hash(int maximum) {		return info._hash(maximum);	}	public Object _duplicate() {		return info._duplicate();	}	public void _release() {		info._release();	}	public Object _get_interface_def() {		return info._get_interface_def();	}	public Request _request(String operation) {		return info._request(operation);	}	public Request _create_request(Context ctx, String operation, NVList arg_list, NamedValue result) {		return info._create_request(ctx, operation, arg_list, result);	}	public Request _create_request(Context ctx, String operation, NVList arg_list, NamedValue result, ExceptionList exclist, ContextList ctxlist) {		return info._create_request(ctx, operation, arg_list, result, exclist, ctxlist);	}	public Policy _get_policy(int policy_type) {		return info._get_policy(policy_type);	}	public DomainManager[] _get_domain_managers() {		return info._get_domain_managers();	}	public Object _set_policy_override(Policy[] policies, SetOverrideType set_add) {		return info._set_policy_override(policies, set_add);	}}
package kudu;import java.io.*;import java.nio.IntBuffer;import java.nio.MappedByteBuffer;import java.nio.channels.FileChannel;/** * Created by Hiram on 2016/3/30. */public class ReadTest {	public static void main(String[] args) {		long time = System.currentTimeMillis();//		writeData();//		readData();		nioReadData();		System.out.println(System.currentTimeMillis() - time);	}	private static void readData() {		ObjectInputStream reader = null;		try {			reader = new ObjectInputStream(new BufferedInputStream(new FileInputStream(new File("Z://test.txt"))));			int i = 0;			long sum = 0;			int count = 0;			try {				while (true) {					i = reader.readInt();					sum += i;					count++;				}			} catch (EOFException e) {			}			System.out.println("sum:" + sum + "  count:" + count);//			writeData();		} catch (IOException e) {			e.printStackTrace();		} finally {			if (reader != null) {				try {					reader.close();				} catch (IOException e) {					e.printStackTrace();				}			}		}	}	private static void nioReadData() {		try {			File cacheFile = new File("Z://test.txt");			FileChannel fc = new RandomAccessFile(cacheFile, "r").getChannel();			MappedByteBuffer buffer = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());			IntBuffer intBuffer = buffer.asIntBuffer();//			while (intBuffer.)//				intBuffer.get();			int capacity = intBuffer.capacity();			long sum = 0;			for (int i = 0; i < capacity; i++) {				sum += intBuffer.get();			}			System.out.println(sum);		} catch (IOException e) {			e.printStackTrace();		}	}	private static void writeData() {		ObjectOutputStream writer = null;		try {			writer = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(new File("Z://test.txt"))));			for (int i = 1; i <= 100000000; i++) {				writer.writeInt(i);			}		} catch (IOException e) {			e.printStackTrace();		} finally {			if (writer != null) {				try {					writer.close();				} catch (IOException e) {					e.printStackTrace();				}			}		}	}}